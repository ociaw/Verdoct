@{
    @await Html.PartialAsync("Api/Sidebar/_SymbolContainers")

    IDocument containingType = Document.GetDocument(CodeAnalysisKeys.ContainingType);
    if (containingType is null)
        return;

    IReadOnlyList<IDocument> constructors = containingType
        .GetDocumentList(CodeAnalysisKeys.Constructors)
        .Where(x => x.GetBool(CodeAnalysisKeys.IsResult))
        .ToList();
    if (constructors is object && constructors.Count > 0)
    {
        <div class="sidebar-nav-item sidebar-header">Constructors</div>
        <div class="sidebar-nav-children">
            @foreach (IDocument constructor in constructors)
            {
                string activeClass = constructor.GetString(CodeAnalysisKeys.SymbolId) == Document.GetString(CodeAnalysisKeys.SymbolId)
                    ? "active"
                    : null;
                <div class="sidebar-nav-item @activeClass">@Context.GetTypeLink(constructor, false)</div>
            }
        </div>
    }

    foreach (IGrouping<string, IDocument> memberGroup
        in containingType.GetDocumentList(CodeAnalysisKeys.Members)
            .Where(x => x.GetBool(CodeAnalysisKeys.IsResult))
            .GroupBy(x => x.GetString(CodeAnalysisKeys.Kind))
            .OrderBy(x => x.Key))
    {
        <div class="sidebar-nav-item sidebar-header">@memberGroup.Key Members</div>
        <div class="sidebar-nav-children">
            @foreach (IDocument member in memberGroup
                .OrderBy(x => x.GetString(CodeAnalysisKeys.Name)))
            {
                string activeClass = member.GetString(CodeAnalysisKeys.SymbolId) == Document.GetString(CodeAnalysisKeys.SymbolId)
                    ? "active"
                    : null;
                <div class="sidebar-nav-item @activeClass">@Context.GetTypeLink(member, false)</div>
            }
        </div>
    }
}