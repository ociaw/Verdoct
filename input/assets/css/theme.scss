@import "variables";

:root {
    // --bg: unset;
    // --txt: unset;
    --head-bg: #262F60;
    --head-txt: #FFF;
    --btn-bg: #06A;
    --btn-txt: #FFF;
    --btn-bord: transparent;
    --btn-out: #AAA;
    --pre-bg: #FAFAEE;
    --pre-txt: #000;
    --pre-bord: #CCC;
    // --a: unset;
    --tag: #06A;

    @media (prefers-color-scheme: dark) {
        --bg: #202020;
        --txt: #D5D5D5;
        --head-bg: #16163F;
        --head-txt: #DDD;
        --btn-bg: #048;
        --btn-txt: #D5D5D5;
        --btn-bord: #555;
        // --btn-out: #AAA;
        --pre-bg: #292929;
        --pre-txt: #DDD;
        --pre-bord: #CCC;
        --a: #75B9F4;
        --tag: #09A;
    }
}

$mixed: mix($secondary, $primary, 50%);

html, body {
    width: 100%;
}

body {
    // Only limit overflow on the body so sticky works
    // See https://github.com/w3c/csswg-drafts/issues/865#issuecomment-379106819
    // And https://stackoverflow.com/a/54116725
    overflow-x: hidden;
}

@media screen {
    body {
        min-height: 100vh;
    }
}

.font-size-sm {
    font-size: $font-size-sm;
}

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
    margin-bottom: $headings-margin-bottom;
    font-family: $headings-font-family;
    font-weight: $headings-font-weight;
    line-height: $headings-line-height;
    color: $headings-color;
}

h1, .h1 { font-size: $h1-font-size; }
h2, .h2 { font-size: $h2-font-size; }
h3, .h3 { font-size: $h3-font-size; }
h4, .h4 { font-size: $h4-font-size; }
h5, .h5 { font-size: $h5-font-size; }
h6, .h6 { font-size: $h6-font-size; }

h1, h2, h3, .display-1, .display-2, .display-3, .display-4, .h-section {
    font-family: $font-family-serif;
    &:not(:first-child) {
        margin-top: $spacer * 1.5;
    }
}

h1 {
    font-weight: bold;
    color: $primary;
    background: -webkit-linear-gradient(darken($mixed, 5%), darken($primary, 5%));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    padding-bottom: $spacer * 0.15;
    margin-bottom: $spacer * 0.5;
}

h1 * {
    // Need to remove the text-fill from nested elements
    background-image: none;
    -webkit-background-clip: initial;
    -webkit-text-fill-color: initial;
}

h2 {
    color: darken(mix($gray-200, $primary, 70%), 20%);
}

h3 {
    color: darken(mix($gray-200, $primary, 70%), 10%);
}

.h-section {
    background: -webkit-linear-gradient(darken($mixed, 5%), darken($primary, 5%));
    color: $white;
    padding: $spacer * 0.5;
    margin-bottom: $spacer / 2;
}

#collapse-topnav {
    display: flex;
    flex-basis: auto;
    align-items: stretch;
    flex-wrap: wrap;
    flex-grow: 1;

    > :first-child {
        margin-right: auto;
    }
}

.nav-link {
    display: block;
    padding: $nav-link-padding-y 0;

    &,&:hover,&:focus {
        text-decoration: none;
    }

    // Disabled state lightens text
    &.disabled {
        color: $nav-link-disabled-color;
        pointer-events: none;
        cursor: default;
    }
}

.navbar {
    position: relative;
    display: flex;
    flex-wrap: wrap; // allow us to do the line break for collapsing content
    align-items: center;
    justify-content: space-between; // space out brand from logo
    padding: $navbar-padding-y $navbar-padding-x;

    & .navbar-nav {
        align-items: stretch;
    }

    & .nav-item {
        display: flex;
        align-items: center;
    }
}

.navbar-nav {
    display: flex;
    flex-direction: row;
    margin: 0;
    list-style: none;
    align-items: stretch;
    gap: $spacer / 2;
}

.navbar-brand {
    display: inline-block;
    padding-top: $navbar-brand-padding-y;
    padding-bottom: $navbar-brand-padding-y;
    margin-right: $navbar-padding-x;
    font-size: $navbar-brand-font-size;
    line-height: inherit;
    white-space: nowrap;
    color: $primary;

    &,&:hover,&:focus {
        text-decoration: none;
    }
}

.navbar-expand {
    flex-flow: row nowrap;
    justify-content: flex-start;

    .navbar-nav {
        flex-direction: row;

        .nav-link {
            padding-right: $navbar-nav-link-padding-x;
            padding-left: $navbar-nav-link-padding-x;
        }
    }
}

#logo {
    height: 2.5rem;
}

code {
    padding: .25rem .5rem;
    margin: 0;
    font-size: $code-font-size;
    color: $code-color;
    word-wrap: break-word;

    // Streamline the style when inside anchors to avoid broken underline and more
    a > & {
        color: inherit;
    }
}

pre {
    display: block;
    font-size: $code-font-size;
    color: $pre-color;
}

pre code {
    display: block;
    padding: 0 $spacer/2;
    overflow-x: scroll;
    font-size: inherit;
    color: inherit;
    word-break: normal;
}

code, pre {
    background-color: $gray-200;
    text-shadow: none;
}

table {
    width: 100%;
    margin-bottom: $spacer;
    color: $table-color;
    background-color: $table-bg; // Reset for nesting within parents with `background-color`.

    th,
    td {
        padding: $table-cell-padding;
        vertical-align: top;
        border-top: $table-border-width solid $table-border-color;
    }

    thead th {
        vertical-align: bottom;
        border-bottom: (2 * $table-border-width) solid $table-border-color;
    }

    tbody + tbody {
        border-top: (2 * $table-border-width) solid $table-border-color;
    }
}

// Ensures tables don't overflow the page
.table-responsive {
    display: block;
    width: 100%;
    overflow-x: scroll;
}

// Remove the border from headings of API tables and make the unstriped rows a little bit darker
.table-api {
    thead {
        th {
            border: none;
            background: $gray-200 linear-gradient(0deg, $gray-200, $gray-100) repeat-x;
            font-size: $font-size-sm;
        }
    }

    tbody {
        tr:nth-of-type(#{$table-striped-order}) {
            background-color: $table-accent-bg;
        }
        tr:nth-of-type(even) {
            background-color: rgba(0, 0, 0, 0.02);
        }
        tr:hover {
            color: $table-hover-color;
            background-color: $table-hover-bg;
        }
        tr td:not(:first-child) {
            font-size: $font-size-sm;
        }
    }
}

.list-unstyled {
    padding-left: 0;
    list-style: none;
}

small {
    font-size: $small-font-size;
    font-weight: $font-weight-normal;
}

#content {
    ul:not([class]), ul[class=""] {
        li {
            padding-top: $spacer * .25;
            padding-bottom: $spacer * .25;
        }
    }

    &.p-4 > pre[class*="language-"] {
        margin-left: -$spacer * 1.5;
        margin-right: -$spacer * 1.5;
        padding-left: $spacer * 1.5;
        padding-right: $spacer * 1.5;
    }
}

#titlebar {
    .breadcrumbs {
        color: darken($white, 10%);
        font-size: $h6-font-size;
        display: flex;
        flex-flow: row wrap;

        span::after {
            color: darken($white, 20%);
            content: "/";
            font-weight: $font-weight-bold;
            margin-left: $spacer * 0.5;
            margin-right: $spacer * 0.5;
            font-size: $font-size-lg;
        }

        span:last-child:after {
            content: '';
        }

        & a {
            &, &:focus, &:active, &:hover {
                color: darken($white, 5%);
            }

            &:hover {
                color: darken($white, 10%);
            }
        }
    }

    .title {
        line-height: 1.5em;
        font-family: $font-family-serif;
        font-size: $h1-font-size;

        small {
            font-size: $small-font-size * 0.8;
            color: lighten($primary, 30%);
        }
    }
}

#undertitle {
    background: $primary linear-gradient(180deg, $primary 30%, darken($primary, 5%) 100%) repeat-x;

    > div {
        min-height: $spacer * 1.5;

        > .row {
            min-height: $spacer * 1.5;
        }
    }
}

.sidebar {
    border-bottom: none;
    padding: $spacer $spacer 0;
    margin-top: 1.5rem;
    margin-bottom: 0;
    overflow-y: auto;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    opacity: 0.6;
    transition: opacity 0.5s;
    display: block !important;
    position: sticky;
    max-height: 100vh;
    z-index: 1020;

    &:hover {
        opacity: 1;
    }
}

// sidebar-root elements can be nested to show root-level styling inside a sidebar
.sidebar-root {
    font-size: $font-size-sm;

    // Root-level items
    & > .sidebar-nav-item {
        font-weight: $font-weight-bold;
        color: $gray-800;
        margin-bottom: $spacer;

        &.has-children {
            margin-bottom: 0;
        }

        &.sidebar-header {
            margin-bottom: $spacer * 0.25;
            color: $gray-900;
            font-size: $font-size-sm * 0.85;
            text-transform: uppercase;
        }
    }

    & > .sidebar-nav-children {
        padding-top: $spacer * 0.5;
        border-top: 3px solid $gray-400;
        margin-bottom: $spacer;

        & > .sidebar-nav-children {
            font-size: $font-size-sm * 0.875;
            padding-left: $spacer * 0.5;

            & > .sidebar-nav-item {
                border-left: 4px solid $gray-200;

                &.active {
                    border-left: 4px solid darken($primary, 10%);
                }
            }
        }
    }


    // All items
    & .sidebar-nav-item {
        padding: $spacer * 0.15 $spacer * 0.5;
        color: $gray-600;

        &.active {
            font-weight: $font-weight-bold;
            color: $white;
            background-color: $primary;

            & a {
                &, &:focus, &:active {
                    color: $white;
                }

                &:hover {
                    color: $white;
                }
            }
        }

        & a {
            &, &:focus, &:active {
                color: $gray-600;
            }

            &:hover {
                color: darken($primary, 20%);
            }
        }
    }

    .sidebar-nav-children {
        padding-bottom: $spacer * 0.25;
    }
}

/* Search */
input[type="search"] {
    width: 100%;
    padding: .25rem .75rem;
    border: 1px solid #ccc;
    border-radius: .25rem;
    box-shadow: inset 0 1px 1px rgba($black, .075);
    color: $gray-700;
}

/* Mermaid */
.mermaid {
    overflow: hidden !important;
    visibility: hidden !important;
    margin-bottom: $spacer;
    line-height: 1;
    height: 100%;

    &[data-processed="true"] {
      visibility: visible !important;
    }

    svg {
      height: 100%;
      /* Remove the max-width setting that Mermaid sets */
      max-width: 100% !important;
    }
  }
  .node rect,
  .node circle,
  .node ellipse,
  .node polygon {
    fill: lighten($primary, 50%) !important;
    stroke: #000 !important;
  }
  .type-node rect,
  .type-node circle,
  .type-node ellipse,
  .type-node polygon {
    fill: lighten($primary, 30%) !important;
    stroke: #000 !important;
  }
  .cluster rect {
    fill: $gray-100 !important;
    stroke: $gray-300 !important;
  }