<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=Edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <link rel="apple-touch-icon" sizes="180x180" href="@Context.GetLink("/assets/favicons/apple-touch-icon.png")">
        <link rel="icon" type="image/png" sizes="32x32" href="@Context.GetLink("/assets/favicons/favicon-32x32.png")">
        <link rel="icon" type="image/png" sizes="16x16" href="@Context.GetLink("/assets/favicons/favicon-16x16.png")">
        <link rel="manifest" href="@Context.GetLink("/assets/favicons/site.webmanifest")">
        <link rel="shortcut icon" type="image/png" href="@Context.GetLink("/assets/favicons/favicon.ico")"/>
        <link rel="mask-icon" href="@Context.GetLink("/assets/favicons/safari-pinned-tab.svg")" color="#e9ecef">
        <meta name="msapplication-config" content="@Context.GetLink("/assets/favicons/browserconfig.xml")" />
        <meta name="msapplication-TileColor" content="#e9ecef">
        <meta name="theme-color" content="#e9ecef">

        @{
            string fontLink = Document.GetString(SiteKeys.FontLink);
            if (!fontLink.IsNullOrWhiteSpace())
            {
                <link href="@Html.Raw(fontLink)" rel="stylesheet" data-no-mirror>
            }
        }
        <link href="@Context.GetLink("/assets/css/theme.css")" rel="stylesheet" />
        <link href="@Context.GetLink("/assets/css/styles.css")" rel="stylesheet" />

        <script src="https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js" defer></script>
        <script src="@Context.GetLink("/assets/js/docable.js")" defer></script>

        <!-- Lunr search -->
        @if (Context.GetBool(WebKeys.GenerateSearchIndex))
        {
            <script src="https://cdn.jsdelivr.net/npm/lunr@2.3.9/lunr.min.js" defer></script>
            <script src="https://cdn.jsdelivr.net/npm/pako@2.0.3/dist/pako_inflate.min.js" defer></script>
            <script src="@(Context.GetLink(Context.GetPath(WebKeys.SearchScriptPath, "search.js")))" defer></script>
            <script src="@Context.GetLink("/assets/js/search.js")" defer></script>
        }

        @await RenderSectionAsync(SectionNames.Head, false)

        @await Html.PartialAsync("_Head")

        @{
            string title = @Document.ContainsKey(Keys.Title)
                ? $"{Document.GetString(SiteKeys.SiteTitle)} - {Document.GetString(Keys.Title)}"
                : Document.GetString(SiteKeys.SiteTitle);
        }
        <title>@title</title>
    </head>
    <body>
        <header>
            <div class="hull">
                @await Html.PartialAsync("_Navigation")
            </div>
            @{
                string apiPath = Context.GetString(DocsKeys.ApiPath);
                string section = Document.Destination.Segments.Length == 0 ? null :
                    (new NormalizedPath(apiPath).ContainsDescendantOrSelf(Document.Destination) ? apiPath : Document.Destination.Segments[0].ToString());
                IDocument root = OutputPages.Get(section + "/index.html");
            }
            @if (!Document.GetBool(SiteKeys.NoTitle))
            {
                <!-- Titlebar -->
                <div id="titlebar">
                    <div class="hull">
                        <div class="fuselage">
                            <div class="breadcrumbs">
                                @if (IsSectionDefined(SectionNames.Breadcrumbs))
                                {
                                    @await RenderSectionAsync(SectionNames.Breadcrumbs, false)
                                }
                                else
                                {
                                    await Html.RenderPartialAsync("_Breadcrumbs", root);
                                }
                            </div>
                            <div class="title">
                                @if (IsSectionDefined(SectionNames.Title))
                                {
                                    @await RenderSectionAsync(SectionNames.Title, false)
                                }
                                else
                                {
                                    await Html.RenderPartialAsync("_Title", root);
                                }
                            </div>
                            @if (IsSectionDefined(SectionNames.Subtitle))
                            {
                                @await RenderSectionAsync(SectionNames.Subtitle, false)
                            }
                        </div>
                    </div>
                </div>
            }
        </header>
        <main>
            @if (IsSectionDefined(SectionNames.Splash))
            {
                @await RenderSectionAsync(SectionNames.Splash, false)
            }
            @await Html.PartialAsync("_Splash")

            <!-- Body -->
            @if (Document.GetBool(SiteKeys.NoContainer))
            {
                <div id="content">
@* Render the body without indenting in case it contains things like directives *@
@RenderBody()
                </div>
            }
            else if (root == null || Document.GetBool(SiteKeys.NoSidebar))
            {
                if (IsSectionDefined(SectionNames.Sidebar))
                {
                    IgnoreSection(SectionNames.Sidebar);
                }
                if (IsSectionDefined(SectionNames.ChildPages))
                {
                    IgnoreSection(SectionNames.ChildPages);
                }

                <div class="hull">
                    <div id="content" class="fuselage">
@* Render the body without indenting in case it contains things like directives *@
@RenderBody()
                    </div>
                </div>
            }
            else
            {
                <div class="hull">
                    <div class="wing">
                        <div id="left-sidebar" class="sidebar">
                            @if (IsSectionDefined(SectionNames.Sidebar))
                            {
                                @await RenderSectionAsync(SectionNames.Sidebar, false)
                            }
                            else
                            {
                                await Html.RenderPartialAsync("_Sidebar", root);
                            }
                        </div>
                    </div>
                    <div id="content" class="fuselage">
@* Render the body without indenting in case it contains things like directives *@
@RenderBody()
                        @if (IsSectionDefined(SectionNames.ChildPages))
                        {
                            @await RenderSectionAsync(SectionNames.ChildPages, false)
                        }
                        else
                        {
                            await Html.RenderPartialAsync("_ChildPages");
                        }
                    </div>
                    <div class="wing">
                        <div id="right-sidebar" class="sidebar">
                            @if (IsSectionDefined(SectionNames.RightSidebar))
                            {
                                @await RenderSectionAsync(SectionNames.RightSidebar, false)
                            }
                            else
                            {
                                await Html.RenderPartialAsync("_RightSidebar");
                            }
                        </div>
                    </div>
                </div>
            }
        </main>

        <!-- Footer -->
        <footer>
            <div class="hull">
                @await Html.PartialAsync("_Footer")
            </div>
        </footer>

        @await RenderSectionAsync(SectionNames.Scripts, false)

        @await Html.PartialAsync("_Scripts")
    </body>
</html>
