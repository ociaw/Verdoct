@{
    @await Html.PartialAsync("Api/Sidebar/_SymbolContainers")

	IDocument containingNamespace = Document.GetDocument(CodeAnalysisKeys.ContainingNamespace);
	if (containingNamespace is null)
		return;

	foreach(IGrouping<string, IDocument> typeGroup
		in containingNamespace.GetDocumentList(CodeAnalysisKeys.MemberTypes)
			.Where(x => x.GetBool(CodeAnalysisKeys.IsResult) && x.GetString(CodeAnalysisKeys.Kind).Equals("NamedType"))
			.GroupBy(x => x.GetString(CodeAnalysisKeys.SpecificKind))
			.OrderBy(x => x.Key))
	{
		<div class="sidebar-nav-item sidebar-header">@typeGroup.Key Types</div>
		<div class="sidebar-nav-children">
			@foreach(IDocument type in typeGroup.OrderBy(x => x.GetString(CodeAnalysisKeys.Name)))
			{
				string activeClass = type.GetString(CodeAnalysisKeys.SymbolId) == Document.GetString(CodeAnalysisKeys.SymbolId) ? "active" : null;
				<div class="sidebar-nav-item @activeClass">@Context.GetTypeLink(type, false)</div>
			}
		</div>
	}
}